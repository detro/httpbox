# Linux setup required
dist: trusty
sudo: required

# This is a Rust build
language: rust
cache: cargo

# Will need access to the Docker service to run "cross"
services: docker

env:
  global:
    - ARTIFACT=httpbox  #< By default, artifact is named 'httpbox', same as defined in 'Cargo.toml'
    - RELEASE_PKG=none  #< By default, nothing gets released

matrix:
  include:
    # ------------------------------------ Stable channel builds
    # Linux, 32 and 64 bit
    - env: RUST_BUILD_TOOL=cross  RUST_TARGET=i686-unknown-linux-gnu    RELEASE_PKG=httpbox-linux-i686.tgz
      rust: stable
    - env: RUST_BUILD_TOOL=cargo  RUST_TARGET=x86_64-unknown-linux-gnu  RELEASE_PKG=httpbox-linux-x86_64.tgz
      rust: stable
    # Mac OS X, 32 and 64 bit
    - env: RUST_BUILD_TOOL=cargo  RUST_TARGET=i686-apple-darwin         RELEASE_PKG=httpbox-macosx-i686.tgz
      os: osx
      rust: stable
    - env: RUST_BUILD_TOOL=cargo  RUST_TARGET=x86_64-apple-darwin       RELEASE_PKG=httpbox-macosx-x86_64.tgz
      os: osx
      rust: stable
    # ------------------------------------ Nightly channel builds
    # Testing nightly channels, 64 bit
    - env: RUST_BUILD_TOOL=cargo  RUST_TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    - env: RUST_BUILD_TOOL=cargo  RUST_TARGET=x86_64-apple-darwin
      os: osx
      rust: nightly

install: |
  if [ "${RUST_BUILD_TOOL}" = "cargo" ]; then
      echo "Updating rustup"
      rustup self update

      echo "Setting up build target for '${RUST_TARGET}' if necessary"
      rustup target add ${RUST_TARGET} || true
  elif [ "${RUST_BUILD_TOOL}" = "cross" ]; then
      echo "Installing cross (if absent) (see https://github.com/japaric/cross)"
      cargo install --list | grep cross || cargo install cross
  else
      echo "Invalid value for RUST_BUILD_TOOL='${RUST_BUILD_TOOL}': aborting!"
      exit 1
  fi

script: |
  echo "Building release for '${RUST_TARGET}' using '${RUST_BUILD_TOOL}'"
  ${RUST_BUILD_TOOL} build --target ${RUST_TARGET} --release

  if [ "none" != "${RELEASE_PKG}" ]; then
      echo "Packaging artifact '${ARTIFACT}' into '${RELEASE_PKG}'"
      tar -C target/${RUST_TARGET}/release/ -czvf ${RELEASE_PKG} ${ARTIFACT}

      echo "Final package content"
      tar -ztvf ${RELEASE_PKG}
  else
      echo "No release package for this build"
  fi

deploy:
  provider: releases
  skip_cleanup: true
  api_key:
    secure: "QQ3Kwx6ODMP+CiZR+KNBgkfyZrfskzFdOz/rERGuDY+daY7pSHMelVSnkmdmrsgnJB+7WUkqP30OyjfAbv0DvdE3BloD3nqZphTUyzAIjvcNLbhAMu4V60EKU2tMZXv0SUTkuBrsTVrj5xztwv60t4QMelQsbEHihewx2yWOwPiCdgGBR0Pf8P1J/iBlR6insXNMv1jtCXXCzw0I9yOWhWeH34n4Oy6flbY7zOlIfwOqoSUxCap5jIZYitDYHNVdVvpt9hQhpJQRKEKbKFaUr974XpQkeuahCv+yKfc+YoNI5mk3VP5bp5X6uMlRmUaE3Xnmv+Jk/f/+r8SCVHciB2nE05evYkZoHI0EtqtYhb1vDdwDlkXWQropItNFnM2RaDRg6g4RL0HbeLRbHF6BDAKK+cSVGUNsmhMWPTOrMOhkQ0QvAmeC8alpSQWJRGkUWGlT/+d/DT1f8fmLuLZxICpzRDwywpO9awX3AvVvRPSW4bdZLCbvSWPM9tekfP5TN0B4E7EEmRPv5OG4TEXLkE2BY0rjUNFdN+K1y6/PE7+DSDbKnUX2X8ezNfjdwP1LRe8e1wc4CmXhFVJRRxsxqvwj7L7TWaq9DC0fHSqtcw4oAG5SynAyMQwx75PAoIAXGOIDvfAvoZs/ejV0uQ3g+2yG+7Y4FwPv5cL7s+/EHgI="
  on:
    # Only release builds that are tagged and that have a $RELEASE_PKG
    condition: $RELEASE_PKG != none
    tags: true
  file: $RELEASE_PKG
